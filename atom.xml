<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jake Zhang</title>
  
  <subtitle>简单的~重复，复杂的~拆分</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-16T12:10:43.246Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jake Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>详述JavaScript数据类型</title>
    <link href="http://yoursite.com/2019/02/14/%E8%AF%A6%E8%BF%B0JavaScript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/02/14/详述JavaScript数据类型/</id>
    <published>2019-02-14T14:16:35.000Z</published>
    <updated>2019-02-16T12:10:43.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、JavaScript数据类型有几种？"><a href="#一、JavaScript数据类型有几种？" class="headerlink" title="一、JavaScript数据类型有几种？"></a>一、JavaScript数据类型有几种？</h1><hr><p>JavaScript有两种数据类型，分别是基本数据类型和引用数据类型。<br>基本数据类型包括：String、Number、Boolean、Null、Undefined和Symbol（ES6新增的，表示独一无二的值）</p><p>而引用类型统称为Object对象，主要包括对象、数组和函数，下面是它们几种字面量的创建方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;<span class="comment">//String</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;<span class="comment">//number</span></span><br><span class="line"><span class="keyword">var</span> bool = <span class="literal">true</span>;<span class="comment">//boolean</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="literal">null</span>; <span class="comment">//object -----这是因为es设计时认为，null表示空对象指针，只不过值为空，但是代码执行时会正常站位；所以用typeof的时候，会返回"object"。所以一般都会把null当做空对象的占位符。</span></span><br><span class="line"><span class="keyword">var</span> und = <span class="literal">undefined</span>   <span class="comment">//undefined</span></span><br><span class="line"><span class="comment">//symbol</span></span><br><span class="line"><span class="comment">// 没有参数的情况</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>();</span><br><span class="line">s1 === s2 <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参数的情况</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</span><br><span class="line">s1 === s2  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h1 id="二、基本数据类型"><a href="#二、基本数据类型" class="headerlink" title="二、基本数据类型"></a>二、基本数据类型</h1><hr><ol><li><strong>值是不可变的</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"Jake Zhang"</span>;</span><br><span class="line"></span><br><span class="line">name.toUpperCase();<span class="comment">//输出 JAKE ZHANG</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name);<span class="comment">// 输出 Jake Zhang</span></span><br></pre></td></tr></table></figure><p>由以上代码可看出基本数据类型的值是不可变的</p><ol start="2"><li><p><strong>存放在栈区</strong></p><p>基本类型值指的是简单的数据段，按值访问，可操作保存在变量中的实际的值，其占据空间小、大小固定，属于被频繁使用的数据，所以放入栈（stack）中存储。</p></li><li><p><strong>值的比较</strong></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> m = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(n == m);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(n === m);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>“= =”：只进行值的比较，会进行数据类型转换；<br>“= = =”：不不仅进行值的比较，还会进行数据类型的比较。</p><h1 id="三、引用数据类型"><a href="#三、引用数据类型" class="headerlink" title="三、引用数据类型"></a>三、引用数据类型</h1><hr><ol><li><p><strong>值是可变的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">name:<span class="string">'jake'</span>,</span><br><span class="line">      age:<span class="number">22</span>,</span><br><span class="line">       action:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"do something!"</span>)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">person.age = <span class="number">23</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.age)<span class="comment">// 23</span></span><br></pre></td></tr></table></figure></li></ol><p>有上面的代码可看出引用数据 类型可以拥有一个或多个属性和方法，而且是可以动态修改的。</p><ol start="2"><li><p><strong>同时存放在栈内存和堆内存</strong></p><p>引用数据类型是存放在堆（heap）中的对象，占据空间大、大小不固定，如果存放在栈中，会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址，当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。（有关js中栈和堆的详解可参考文章[(<a href="https://www.cnblogs.com/heioray/p/9487093.html)）" target="_blank" rel="noopener">https://www.cnblogs.com/heioray/p/9487093.html)）</a></p></li><li><p><strong>值的比较</strong></p></li></ol><p>当从一个变量向另一个变量赋引用类型的值时，同样也会将存储在变量中的对象的值复制一份到位新变量分配的空间中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  age:<span class="number">20</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> person2 = person1;</span><br><span class="line">person2.age = <span class="number">23</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1.age = person2.age)<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>前面讲到基本数据类型和引用数据类型存储于内存中的位置不一样，引用数据类型存储在堆中的对象，与此同时，在栈中存储了指针，而这个指针的指向正是堆中实体的起始位置。变量person1初始化时，person1指针指向该对象{age：20}的地址，将person1赋给person2后，person2又指向该对象{age：20}的地址，这两个变量指向了同一个对象。因此改变其中任何一个变量，都会相互影响。<br><img src="https://img-blog.csdnimg.cn/20190123171842933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzM1MDQw,size_16,color_FFFFFF,t_70" alt="ZJK"><br>此时，如果取消某一个变量对于原对象的引用，不会影响到另一个变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;age:22&#125;</span><br><span class="line">var b = a;</span><br><span class="line">a = 1;</span><br><span class="line">console.log(b);//&#123;age:22&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，a和b指向同一个对象，然后a的值变为1，这时不会对b产生影响，b还是指向原来的那个对象。      </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、JavaScript数据类型有几种？&quot;&gt;&lt;a href=&quot;#一、JavaScript数据类型有几种？&quot; class=&quot;headerlink&quot; title=&quot;一、JavaScript数据类型有几种？&quot;&gt;&lt;/a&gt;一、JavaScript数据类型有几种？&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>hexo github搭建个人博客的感想</title>
    <link href="http://yoursite.com/2019/02/14/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%84%9F%E6%83%B3/"/>
    <id>http://yoursite.com/2019/02/14/hexo搭建个人博客感想/</id>
    <published>2019-02-14T11:24:59.216Z</published>
    <updated>2019-02-16T09:18:27.152Z</updated>
    
    <content type="html"><![CDATA[<p>好久前就想用hexo搭建一个自己的博客，闲来无聊写点东西，但一直都没有付诸行动，直到我在CSDN注册了账号，在我刷博客时，偶然发现一个hexo搭建个人博客的教程，结果弄了我整整一天，硬是访问不了，后来问了一个朋友又要了一个教程，才发现我看的教程有个关键点没写（域名三次解析及注意事项），到今天终于能访问了，今晚肯定睡着都会笑，毕竟拥有一个自己搭建的博客是每一个码农的信仰，虽然很多东西还要花时间慢慢部署，但总算迈出第一步了，教程我把我朋友给我的放这，有想搭建个人博客的可以参考参考<a href="教程">https://zhuanlan.zhihu.com/p/26625249</a>哈哈，我呢先来熟悉哈Markdown的语法，然后把我CSDN的文章搬过来</p><h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h1><p>第一种是使用 # 表示标题，其中 # 号必须在行首，</p><p>第二种是使用 === 或者 — 表示。<br>–&gt; # 这是一级标题</p><p>–&gt; ## 这是二级标题</p><p>–&gt; ### 这是三级标题</p><h1 id="2-分割线"><a href="#2-分割线" class="headerlink" title="2.分割线"></a>2.分割线</h1><p>使用三个或以上的 - 或者 * 表示，且这一行只有符号，注意不要被识别为二级标题即可，例如中间或者前面可以加空格。</p><hr><hr><h1 id="3-斜体和粗体"><a href="#3-斜体和粗体" class="headerlink" title="3.斜体和粗体"></a>3.斜体和粗体</h1><p>使用*和**分别表示斜体和粗体，</p><p><em>我是斜体</em></p><p><strong>我是粗体</strong></p><p><strong><em>又斜又粗</em></strong></p><h1 id="4-超链接和图片"><a href="#4-超链接和图片" class="headerlink" title="4.超链接和图片"></a>4.超链接和图片</h1><p>超链接和图片的写法类似，图片尽在超链接前面多了一个文字描述，一般是<a href="链接">点我跳转</a>&lt;–这个就是超链接。</p><h1 id="5-无序列表"><a href="#5-无序列表" class="headerlink" title="5.无序列表"></a>5.无序列表</h1><p>使用+、-和*表示无序列表，前后刘一行空白，可嵌套，例如：</p><ul><li>AAA<ul><li>A1</li><li>A2<ul><li>a1</li><li>a2</li></ul></li></ul></li></ul><h1 id="6-有序列表"><a href="#6-有序列表" class="headerlink" title="6.有序列表"></a>6.有序列表</h1><p>使用 ‘1.’ （点号后面有个空格）表示有序列表，可嵌套。</p><pre><code>1. A   1. A1   2. A2       1. a1</code></pre><h1 id="7-文字引用"><a href="#7-文字引用" class="headerlink" title="7.文字引用"></a>7.文字引用</h1><p>使用 &gt; 表示，可以有多个 &gt;，表示层级更深，例如</p><blockquote><p>第一层</p><blockquote><p>第二层</p><blockquote><p>第三层</p></blockquote></blockquote></blockquote><blockquote><p>跳出来要空一行</p></blockquote><h1 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.代码块"></a>8.代码块</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这里面放代码。。。</span><br></pre></td></tr></table></figure><p>差不多这些就是常用的了，当然还有很多，以后碰到在更新。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久前就想用hexo搭建一个自己的博客，闲来无聊写点东西，但一直都没有付诸行动，直到我在CSDN注册了账号，在我刷博客时，偶然发现一个hexo搭建个人博客的教程，结果弄了我整整一天，硬是访问不了，后来问了一个朋友又要了一个教程，才发现我看的教程有个关键点没写（域名三次解析及
      
    
    </summary>
    
    
      <category term="感想" scheme="http://yoursite.com/tags/%E6%84%9F%E6%83%B3/"/>
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
