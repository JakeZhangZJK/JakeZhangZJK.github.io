<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jake Zhang</title>
  
  <subtitle>简单的~重复，复杂的~拆分</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-08T03:41:24.515Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jake Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端学习之JavaScript原型与原型链剖析</title>
    <link href="http://yoursite.com/2019/03/08/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BJavaScript%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%89%96%E6%9E%90/"/>
    <id>http://yoursite.com/2019/03/08/前端学习之JavaScript原型与原型链剖析/</id>
    <published>2019-03-08T03:36:30.000Z</published>
    <updated>2019-03-08T03:41:24.515Z</updated>
    
    <content type="html"><![CDATA[<p><strong>普通对象和函数对象</strong></p><p>在前面整理JavaScript面向对象的文章中我就有写到JS所有对象分为函数对象和普通对象。凡是通过new Function创建的对象都是函数对象，其他都是普通对象（通常通过Object创建），可以通过typeof来判断，由function创造出来的函数，比如：</p><pre><code>function f1() {};typeof f1 //&quot;function&quot;var f2 = function() {}typeof f2 // &quot;function&quot;var o1 = new f1();typeof o1 //&quot;object&quot;var o2 = {};typeof o2 //&quot;object&quot;</code></pre><p>可能有人会问，不是通过new Function创建的对象才是函数对象吗？注意下面这两种写法是一样的，function f1(){}; 等价于 var f1 = new Function(); 写了这么多，有些人可能不展示了，这跟原型有什么关系呢？</p><p>下面两句话很重要</p><p><strong>1、每一个函数对象都有一个prototype属性，但是普通对象是没有的；<br>　 prototype下面又有个construetor，指向这个函数。<br>2、每个对象都有一个名为<em>proto</em>的内部属性，指向它所对应的构造函数的原型对象，原型链基于<em>proto</em>;</strong></p><p><strong>普通对象</strong></p><pre><code>var o = {}; //1、o的确没有prototype属性  2、o是Object的实例console.log(o.prototype); //undefinedconsole.log(o instanceof Object); //true</code></pre><p><strong>函数对象</strong></p><pre><code>function Fun(){};var f1 = new Fun ();//1、Fun是函数对象，f1还是普通对象 2、f1是Fun的实例console.log(f1.prototype); //undefinedconsole.log(f1 instanceof Fun); //true</code></pre><p><strong>原型对象</strong></p><p>说到原型对象，我们先了解下构造函数是什么？构造函数与其他函数唯一的区别在于调用方式不同。任何函数只要通过new来调用就可以作为构造函数，它是用来创建特定类型的对象。</p><p>下面定义一个构造函数Animal：</p><pre><code>function Animal (name){     this.name = name;     this.species = &apos;动物&apos;;   }</code></pre><p>通过new命令来生成一个Animal实例：</p><pre><code>var cat = new Animal (&quot;猫&quot;)</code></pre><p>这里，构造函数Animal就是实例对象cat的原型。Animal里的this关键字就指的是cat这个对象。new出来的cat对象此时已经和Animal再无联系了，也就是说每一个new出来的实例都有自己的属性和方法的副本，是独立的的！修改其中一个不会影响另一个。</p><pre><code>var dog = new Animal(&quot;狗&quot;);dog.species = &apos;食肉动物&apos;;console.log(cat.species)      // 动物console.log(dog.species)      // 食肉动物</code></pre><p>但是，我们希望构造函数中的species属性是一个共有属性，那么此时用这样的方法，每个实例中都有一个相同的species属性，会造成资源极大的浪费！</p><p> 那么原型对象就即将登场了！给每一个构造函数都设置一个prototype属性，这个属性就指向原型对象。其实原型对象就只是个普通对象，里面存放着所有实例对象需要共享的属性和方法！所以，我们把需要共享的放到原型对象里，把那些不需要共享的属性和方法存在构造函数里！</p><p>那么上面的代码怎么修改呢？</p><pre><code>function Animal(name) {    this.name = name;}Animal.prototype.species = &apos;动物&apos;;var cat = new Animal(&quot;猫&quot;);var dog = new Animal(&quot;狗&quot;);console.log(cat.species) // 动物console.log(dog.species) // 动物Animal.prototype.species = &apos;食肉动物&apos;;console.log(cat.species) // 食肉动物console.log(dog.species) // 食肉动物</code></pre><p>可以看出，修改prototype属性会影响它的所有实例的species的值。</p><p>实例一旦创建出来就会自动引用prototype对象的属性和方法！所以实例对象的属性和方法一般分为两种：一种是自身的，一种是引用自prototype的。</p><p>具体实现是这样的：</p><p>每当代码读取某个对象的某个属性的时候，都会执行一次搜索。首先从对象实例本身开始，如果在实例中找到了该属性，则返回该属性的值，如果没有找到，则顺着原型链指针向上，到原型对象中去找，如果找到就返回该属性值。</p><p><strong>原型链</strong></p><p>事实上，js里完全依靠”原型链”(prototype chain)模式来实现继承。</p><p>上面说完原型对象。下面要扒一扒<strong>proto</strong>、prototype、constructor</p><p><strong>proto</strong>：事实上就是原型链指针</p><p>prototype：上面说到这个是指向原型对象的</p><p>constructor：每一个原型对象都包含一个指向构造函数的指针，就是constructor</p><p><strong>继承</strong></p><p> 为了实现继承，<strong>proto</strong>会指向上一层的原型对象，而上一层的结构依然类似，那么就利用<strong>proto</strong>一直指向Object的原型对象上！Object.prototype.<strong>proto</strong> = null;表示到达最顶端。如此形成了原型链继承。</p><p>下面有个图解非常经典，可以手画几遍去理解，非常有效~<br><img src="https://img-blog.csdnimg.cn/20190308113401953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzM1MDQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;普通对象和函数对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在前面整理JavaScript面向对象的文章中我就有写到JS所有对象分为函数对象和普通对象。凡是通过new Function创建的对象都是函数对象，其他都是普通对象（通常通过Object创建），可以通过ty
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端学习——闭包</title>
    <link href="http://yoursite.com/2019/03/05/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2019/03/05/前端学习——闭包/</id>
    <published>2019-03-05T15:27:48.000Z</published>
    <updated>2019-03-05T15:58:14.686Z</updated>
    
    <content type="html"><![CDATA[<p>闭包（closure）是javascript的一大难点，也是它的特色。很多高级应用都要依靠闭包来实现。</p><p>要理解闭包，首先要理解javascript的全局变量和局部变量。</p><p>javascript语言的特别之处就在于：函数内部可以直接读取全局变量，但是在函数外部无法读取函数内部的局部变量。</p><pre><code>function f1(){    var a=10;    function f2(){    alert(a); // 10    }}</code></pre><h2 id="如何从外部读取函数内部的局部变量？"><a href="#如何从外部读取函数内部的局部变量？" class="headerlink" title="如何从外部读取函数内部的局部变量？"></a>如何从外部读取函数内部的局部变量？</h2><p>我们有时候需要获取到函数内部的局部变量，正常情况下，这是办不到的！只有通过变通的方法才能实现。那就是在函数内部，再定义一个函数。</p><h2 id="闭包的概念"><a href="#闭包的概念" class="headerlink" title="闭包的概念"></a>闭包的概念</h2><p>上面代码中的f2函数，就是闭包。</p><p>各种专业文献的闭包定义都非常抽象，我的理解是: 闭包就是能够读取其他函数内部变量的函数。</p><p>由于在javascript中，只有函数内部的子函数才能读取局部变量，所以说，闭包可以简单理解成“定义在一个函数内部的函数“。</p><p>所以，在本质上，闭包是将函数内部和函数外部连接起来的桥梁。</p><h2 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h2><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中，不会在f1调用后被自动清除。</p><p>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p><p>在我们平时的代码中经常会用到闭包，比如在构造函数中</p><pre><code>function a(){var n = 0;this.add = function () {    n++;    console.log(n); };}var c = new a();c.add();    //控制台输出1c.add();    //控制台输出2//另一种写法function a(){this.n = 0,this.add = function () {    this.n++;    console.log(this.n);};}var c = new a();c.add();    //控制台输出1c.add();    //控制台输出2</code></pre><p><strong>常见闭包的写法</strong></p><pre><code>function a(){var n = 0;function add(){   n++;   console.log(n);}return add;}var a1 = a(); //注意，函数名只是一个标识（指向函数的指针），而    （）才是执行函数；a1();    //控制台输出1a1();    //控制台输出2//另一种调用方法function a(){var n = 0;function add(){   n++;   console.log(n);}return add;} a()();//定义函数并立即调用var a = (function() {        var n = 0;    return function() {       n++;       console.log(n);    };  }());a();</code></pre><p>##闭包的实际应用</p><p>使用闭包，我们可以做很多事情。比如模拟面向对象的代码风格；更优雅，更简洁的表达出代码；在某些方面提升代码的执行效率。</p><p><strong>封装</strong></p><pre><code>var person = function(){   //变量作用域为函数内部，外部无法访问   var name = &quot;张三&quot;;      return {      getName : function(){          return name;      },      setName : function(newName){          name = newName;      }    }   }();   Console.log(person.name);  //通过person.name是无法获取到name的值，如果要获取到name的值可以通过Console.log(person.getName());   //直接获取到 张三person.setName(&quot;李四&quot;);     //重新设置新的名字print(person.getName());      //获取 李四</code></pre><p><strong>继承</strong></p><pre><code>function Person(){   var name = &quot;张三&quot;;     return {      getName : function(){          return name;      },      setName : function(newName){          name = newName;      }    }   };  var BlackPeople = function(){};//黑人继承自PersonBlackPeople.prototype = new Person();var p = new BlackPeople();p.setName(&quot;Tom&quot;);console.log(p.getName());  // Tom</code></pre><p><strong>总结：闭包就是一个函数引用另外一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会徒增内存消耗！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;闭包（closure）是javascript的一大难点，也是它的特色。很多高级应用都要依靠闭包来实现。&lt;/p&gt;
&lt;p&gt;要理解闭包，首先要理解javascript的全局变量和局部变量。&lt;/p&gt;
&lt;p&gt;javascript语言的特别之处就在于：函数内部可以直接读取全局变量，但是
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript面向对象（2）----继承</title>
    <link href="http://yoursite.com/2019/02/17/JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%882%EF%BC%89-%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2019/02/17/JavaScript面向对象（2）-继承/</id>
    <published>2019-02-16T16:03:01.000Z</published>
    <updated>2019-03-05T15:57:55.425Z</updated>
    
    <content type="html"><![CDATA[<p>2019了，又老了一岁，首先呢，祝大家新年快乐，也祝大家开年大吉，今天正式开工了。在前一篇文章中跟大家分享了js面向对象的基本概念及一个封装的小demo，今天我们继续分享js面向对象中的继承。<br>说实在话，我在学继承时老师说了很多种继承方式，但到现在我就只记得“寄生组合继承”，因为老师说这是最优最好的继承方式。最近因为自己在整理自己的前端知识体系，就心心念念的想好好的整理一番js面向对象这个知识点。本文补充了es6 Class的相关内容，从我认为更容易理解的角度将继承做一个总结。</p><h2 id="1、继承分类"><a href="#1、继承分类" class="headerlink" title="1、继承分类"></a>1、继承分类</h2><p>先来个整体印象，如下图，JS中继承可以按照是否使用object函数将继承分成两部分（Object.create是es5新增的方法，用来规范化这个函数）。其中，原型链继承和原型式继承有一样的优缺点，构造函数继承与寄生式继承也相互对应。寄生组合继承基于Object.create, 同时优化了组合继承，成为了完美的继承方式。ES6 Class Extends的结果与寄生组合继承基本一致，但是实现方案又略有不同。</p><p><img src="https://img-blog.csdnimg.cn/20190213082148969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzM1MDQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2、继承方式"><a href="#2、继承方式" class="headerlink" title="2、继承方式"></a>2、继承方式</h2><p>上图中的上半部分涉及到原型链，这又是一个难点，本文着重讲继承，至于原型及原型链我会单外整理。</p><h3 id="2-1、原型链继承"><a href="#2-1、原型链继承" class="headerlink" title="2.1、原型链继承"></a>2.1、原型链继承</h3><p>核心：将父类的实例作为子类的原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType() </span><br><span class="line"><span class="comment">// 所有涉及到原型链继承的继承方式都要修改子类构造函数的指向，否则子类实例的构造函数会指向SuperType。</span></span><br><span class="line">SubType.prototype.constructor = SubType;</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>父类方法可以复用。</li></ul><p>缺点：</p><ul><li>父类的引用属性会被所有子类实例共享</li><li>子类构建实例时不能向父类传递参数</li></ul><h3 id="2-2-构造函数继承"><a href="#2-2-构造函数继承" class="headerlink" title="2.2 构造函数继承"></a>2.2 构造函数继承</h3><p>核心：将父类构造函数的内容复制给了子类的构造函数。这是所有继承中唯一一个不涉及到prototype的继承。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SuperType.call(SubType);</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>和原型链继承完全反过来</li><li>父类的引用属性不会被共享</li><li>子类构建实例时可以向父类传递参数</li></ul><p>缺点：</p><ul><li>父类的方法不能复用，子类实例的方法每次都是单独创建的。</li></ul><h3 id="2-3-组合继承"><a href="#2-3-组合继承" class="headerlink" title="2.3 组合继承"></a>2.3 组合继承</h3><p>核心：原型式继承和构造函数继承的组合，兼具了二者的优点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent'</span>;</span><br><span class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this is parent'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  SuperType.call(<span class="keyword">this</span>); <span class="comment">// 第二次调用SuperType</span></span><br><span class="line">&#125;</span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType() <span class="comment">// 第一次调用SuperType</span></span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>父类的方法可以被复用</li><li>父类的引用属性不会被共享</li><li>子类构建实例时可以向父类传递参数</li></ul><p>缺点：调用了两次父类的构造函数，第一次给子类的原型添加了父类的name, arr属性，第二次又给子类的构造函数添加了父类的name, arr属性，从而覆盖了子类原型中的同名参数。这种被覆盖的情况造成了性能上的浪费。</p><h3 id="2-4-原型式继承"><a href="#2-4-原型式继承" class="headerlink" title="2.4 原型式继承"></a>2.4 原型式继承</h3><p>核心：原型式继承的object方法本质上是对参数对象的一个浅拷贝。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span>,</span><br><span class="line">  friends: [<span class="string">"Shelby"</span>, <span class="string">"Court"</span>, <span class="string">"Van"</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> anotherPerson = object(person);</span><br><span class="line">anotherPerson.name = <span class="string">"Greg"</span>;</span><br><span class="line">anotherPerson.friends.push(<span class="string">"Rob"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yetAnotherPerson = object(person);</span><br><span class="line">yetAnotherPerson.name = <span class="string">"Linda"</span>;</span><br><span class="line">yetAnotherPerson.friends.push(<span class="string">"Barbie"</span>);</span><br><span class="line"></span><br><span class="line">alert(person.friends); <span class="comment">//"Shelby,Court,Van,Rob,Barbie"</span></span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>父类方法可以复用。</li></ul><p>缺点：</p><ul><li>父类的引用属性会被所有子类实例共享</li><li>子类构建实例时不能向父类传递参数</li></ul><p>ECMAScript 5 通过新增 Object.create()方法规范化了原型式继承。这个方法接收两个参数:一 个用作新对象原型的对象和(可选的)一个为新对象定义额外属性的对象。在传入一个参数的情况下， Object.create()与 object()方法的行为相同。——《JAVASCript高级编程》</p><p>所以上文中代码可以转变为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> yetAnotherPerson = bject(person); =&gt; <span class="keyword">var</span> yetAnotherPerson =<span class="built_in">Object</span>.create(person);</span><br></pre></td></tr></table></figure><h3 id="2-5-寄生式继承"><a href="#2-5-寄生式继承" class="headerlink" title="2.5 寄生式继承"></a>2.5 寄生式继承</h3><p>核心：使用原型式继承获得一个目标对象的浅复制，然后增强这个拷贝的能力。</p><p>优缺点：仅提供一种思路，没什么优点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">original</span>)</span>&#123; </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> clone=object(original);   <span class="comment">//通过调用函数创建一个新对象</span></span><br><span class="line"></span><br><span class="line"> clone.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   <span class="comment">//以某种方式来增强这个对象</span></span><br><span class="line">alert(<span class="string">"hi"</span>);</span><br><span class="line"></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> clone;   <span class="comment">//返回这个对象</span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> person = &#123;</span><br><span class="line"></span><br><span class="line"> name: <span class="string">"Nicholas"</span>,</span><br><span class="line"></span><br><span class="line"> friends: [<span class="string">"Shelby"</span>, <span class="string">"Court"</span>, <span class="string">"Van"</span>]</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> anotherPerson = createAnother(person);</span><br><span class="line"> anotherPerson.sayHi(); <span class="comment">//"hi"</span></span><br></pre></td></tr></table></figure><h3 id="2-6-寄生组合继承"><a href="#2-6-寄生组合继承" class="headerlink" title="2.6 寄生组合继承"></a>2.6 寄生组合继承</h3><p>刚才说到组合继承有一个会两次调用父类的构造函数造成浪费的缺点，寄生组合继承就可以解决这个问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> prototype = object(superType.prototype); <span class="comment">// 创建了父类原型的浅复制</span></span><br><span class="line"></span><br><span class="line">prototype.constructor = subType;             <span class="comment">// 修正原型的构造函数</span></span><br><span class="line"></span><br><span class="line">subType.prototype = prototype;               <span class="comment">// 将子类的原型替换为这个原型</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">SuperType.call(<span class="keyword">this</span>, name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 核心：因为是对父类原型的复制，所以不包含父类的构造函数，也就不会调用两次父类的构造函数造成浪费</span></span><br><span class="line">inheritPrototype(SubType, SuperType);</span><br><span class="line"></span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  alert(<span class="keyword">this</span>.age);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：这是一种完美的继承方式。</p><h4 id="2-7-ES6-Class-extends"><a href="#2-7-ES6-Class-extends" class="headerlink" title="2.7 ES6 Class extends"></a>2.7 ES6 Class extends</h4><p>核心： ES6继承的结果和寄生组合继承相似，本质上，ES6继承是一种语法糖。但是，寄生组合继承是先创建子类实例this对象，然后再对其增强；而ES6先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line">   <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6实现继承的具体原理：</span></span><br><span class="line"></span><br><span class="line">classA &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf = <span class="function"><span class="keyword">function</span> (<span class="params">obj, proto</span>) </span>&#123;</span><br><span class="line"> obj.__proto__ = proto;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// B 的实例继承 A 的实例</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(B.prototype, A.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">// B 继承 A 的静态属性</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(B, A);</span><br></pre></td></tr></table></figure><p>ES6继承与ES5继承的异同：</p><p>相同点：</p><ul><li>本质上ES6继承是ES5继承的语法糖。</li></ul><p>不同点：</p><ul><li>ES6继承中子类的构造函数的原型链指向父类的构造函数，ES5中使用的是构造函数复制，没有原型链指向。</li><li>ES6子类实例的构建，基于父类实例，ES5中不是。</li></ul><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><ul><li>ES6 Class extends是ES5继承的语法糖；</li><li>JS的继承除了构造函数继承之外都基于原型链构建的；</li><li>可以用寄生组合继承实现ES6 Class extends，但是还是会有细微的差别。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2019了，又老了一岁，首先呢，祝大家新年快乐，也祝大家开年大吉，今天正式开工了。在前一篇文章中跟大家分享了js面向对象的基本概念及一个封装的小demo，今天我们继续分享js面向对象中的继承。&lt;br&gt;说实在话，我在学继承时老师说了很多种继承方式，但到现在我就只记得“寄生组合
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript面向对象（1）----封装</title>
    <link href="http://yoursite.com/2019/02/17/JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%881%EF%BC%89-%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2019/02/17/JavaScript面向对象（1）-封装/</id>
    <published>2019-02-16T16:02:02.000Z</published>
    <updated>2019-02-16T16:10:12.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、js面向对象的概念（个人理解）"><a href="#1、js面向对象的概念（个人理解）" class="headerlink" title="1、js面向对象的概念（个人理解）"></a>1、js面向对象的概念（个人理解）</h2><p>（1）面向对象，即OOP（Object Oriented Programming），是计算机的一种编程架构，OOP的基本原则是计算机是由子程序作用的单个或者多个对象组合而成，包含属性和方法的对象是类的实例，但是JavaScript中没有类的概念，而是直接使用对象来实现编程。<br>（2）js面向对象是一种思想，在我的理解中，对象由属性和方法组成。属性可以理解为对象特征的载体，是静态的；方法可以理解为对象的行为，是动态的。比如：在汽车这个对象中，它的颜色，型号，大小就是它的属性，而行驶则是他的方法。<br>（3）在js中，所有的对象可以分为普通对象和函数对象。而Object ，Function 是JS自带的函数对象。凡是通过 new Function() 创建的对象都是函数对象，其他的都是普通对象。<br>以上是我个人的理解，js面向对象的知识点包括封装、继承和多态等，今天我先用一个小例子分享一下封装，后续的博文会更新继承和多态。<br>关于js面向对象可以看看这篇文章：<a href="https://blog.csdn.net/lihangxiaoji/article/details/79753473" target="_blank" rel="noopener">https://blog.csdn.net/lihangxiaoji/article/details/79753473</a><br>那在js中怎么创建和操作对象呢，下面通过代码来一看究竟：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">             <span class="comment">//三大类型</span></span><br><span class="line"><span class="comment">//1.Array(数组类型)</span></span><br><span class="line"><span class="comment">//(1).使用Array构造函数</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">'a'</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">'b'</span>;</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>);</span><br><span class="line"><span class="comment">//(2).使用字面量表示法</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'yellow'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">//2.object类型</span></span><br><span class="line"><span class="comment">//（1）、object构造函数</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">'zjk'</span>;</span><br><span class="line"><span class="comment">//person[age] = 18; 没有引号</span></span><br><span class="line">person[<span class="string">'age'</span>] = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"><span class="comment">//（2）、使用字面量表示法</span></span><br><span class="line"><span class="comment">//A.简单字面量</span></span><br><span class="line"><span class="keyword">var</span> person2 = &#123;&#125;;</span><br><span class="line">person2.name = <span class="string">'jack'</span>;</span><br><span class="line">person2.action = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//B.嵌套字面量 项目中用的最多</span></span><br><span class="line"><span class="keyword">var</span> person3 = &#123;</span><br><span class="line">name:<span class="string">"black jack"</span>,<span class="comment">//name如果是保留字、有连接符/空格，则要'name-p'</span></span><br><span class="line">age:<span class="number">20</span>,</span><br><span class="line">action:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//(3)、工厂方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">obj.name = name;</span><br><span class="line">obj.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.name)&#125;;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p =  createObj(<span class="string">'aa'</span>);</span><br><span class="line">p.showName();</span><br><span class="line"><span class="comment">//(4).构造函数 驼峰命名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateObj2</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.name)&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> CreateObj2(<span class="string">'大米'</span>);</span><br><span class="line">p2.showName();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  age:<span class="number">20</span></span><br><span class="line">   &#125;</span><br><span class="line">         <span class="keyword">var</span> person2 = person1;</span><br><span class="line">person2.age = <span class="number">23</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1.age = person2.age)<span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">age</span>:<span class="number">22</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><p>再来看看对象属性有哪些操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">         <span class="comment">//1.1属性的添加  --&gt; . / []</span></span><br><span class="line"><span class="comment">//二者区别：.是取自身的属性；[]可以是变量</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.name = <span class="string">"zjk"</span>;</span><br><span class="line">obj[<span class="string">"age"</span>] = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//实例</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line">obj2.name = <span class="string">"jack"</span>;</span><br><span class="line">obj2.a = <span class="string">"aaa"</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'name'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2[<span class="string">'a'</span>]);<span class="comment">//aaa</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2[a]);<span class="comment">//obj2['name']</span></span><br><span class="line"><span class="comment">//1.2属性删除</span></span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;&#125;;</span><br><span class="line">obj3.name = <span class="string">'zjk'</span>;</span><br><span class="line">obj3.age = <span class="number">20</span>;</span><br><span class="line">obj3.state = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">delete</span> obj3.name;<span class="comment">//删除name属性  obj3['name']</span></span><br><span class="line"><span class="comment">//2.检测属性  判断对象中是否存在该属性</span></span><br><span class="line"><span class="comment">// in 运算符  继承过来的也能获取到</span></span><br><span class="line"><span class="keyword">var</span> obj4 = &#123;</span><br><span class="line">name:<span class="string">'zjk'</span>,</span><br><span class="line">age:<span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> obj4);</span><br><span class="line"><span class="comment">//hasOwnroperty()方法</span></span><br><span class="line"><span class="keyword">var</span> obj5 = &#123;</span><br><span class="line">name:<span class="string">'zjk'</span>,</span><br><span class="line">age:<span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line">obj5.hasOwnProperty(<span class="string">'name'</span>);</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'name'</span>;</span><br><span class="line">obj5.hasOwnProperty(a);</span><br><span class="line"><span class="comment">//!=undefined 值的判断</span></span><br><span class="line"><span class="built_in">console</span>.log(obj5.name !=<span class="literal">undefined</span>);<span class="comment">//=赋值；==判断（比较两个值是否匹配，不进行类型匹配）；===全等（两个值要要进行类型匹配）</span></span><br><span class="line"><span class="comment">//3.枚举属性</span></span><br><span class="line"><span class="comment">//(1).for in</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">name:<span class="string">'zjk'</span>,</span><br><span class="line">age:<span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> a <span class="keyword">in</span> o)&#123;<span class="comment">//for(属性 in 对象)</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//name age</span></span><br><span class="line"><span class="built_in">console</span>.log(o[a])<span class="comment">//zjk 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> a <span class="keyword">in</span> arr)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//获取索引</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[a]);<span class="comment">//获取值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//(2)forEach()  这个也是常用的一个遍历数组的方法</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>];</span><br><span class="line">arr2.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(item);</span><br><span class="line"><span class="comment">//return item 不行</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//（3）map() 回调函数中支持return返回值 用的多</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>];</span><br><span class="line">arr3.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(item);</span><br><span class="line"><span class="keyword">return</span> item ;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//for()</span></span><br><span class="line"><span class="comment">//4.序列化 JSON.parse()//对象字符串转为对象(深拷贝)  JSON.stringity()//对象转为对象字符串</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="comment">//这是一个对象</span></span><br><span class="line">name:<span class="string">'zjk'</span>,</span><br><span class="line">age:<span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">JSON</span>.stringify(o));<span class="comment">//string  对象转化为对象字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> o);<span class="comment">//object</span></span><br></pre></td></tr></table></figure><p>对js面向对象有所了解后，我们来看个简单的，但也是项目中百分百会做碰到例子——表单校验，在学过面向对象后，要逐渐地把以前面向过程式开发转向面向对象。我在这里放了三个封装程度不同的版本，还有过程式开发的，我们一起来看看：</p><p><strong>过程式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">//正则</span></span><br><span class="line"><span class="comment">// var filter  = /^[\u4e00-\u9fa5]&#123;2,4&#125;$/;</span></span><br><span class="line">   <span class="comment">// var filter  = /^((\+?86)|(\(\+86\)))?(13[012356789][0-9]&#123;8&#125;|15[012356789][0-9]&#123;8&#125;|18[02356789][0-9]&#123;8&#125;|147[0-9]&#123;8&#125;|1349[0-9]&#123;7&#125;)$/;</span></span><br><span class="line">   <span class="comment">//var filter  = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]&#123;2,4&#125;)+$/;</span></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   <span class="comment">//1、成为焦点  错误提示框隐藏</span></span><br><span class="line">   $(<span class="string">".list li input"</span>).on(<span class="string">'focus'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       $(<span class="keyword">this</span>).siblings(<span class="string">".tip-error"</span>).hide();  <span class="comment">//find()   next()   siblings()</span></span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//2、失去焦点       1）为空判断   2）格式匹配（正则）</span></span><br><span class="line">   $(<span class="string">".list .name"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> cur = $(<span class="keyword">this</span>);</span><br><span class="line">       <span class="keyword">var</span> value = cur.val();</span><br><span class="line">       <span class="keyword">var</span> filter  = <span class="regexp">/^[\u4e00-\u9fa5]&#123;2,4&#125;$/</span>;   <span class="comment">//正则</span></span><br><span class="line">       fromEvent (cur,value,filter,<span class="string">'用户名不能为空'</span>,<span class="string">'用户名输入错误'</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">   $(<span class="string">".list .mobile"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> cur = $(<span class="keyword">this</span>);</span><br><span class="line">       <span class="keyword">var</span> value = cur.val();</span><br><span class="line">       <span class="keyword">var</span> filter  = <span class="regexp">/^((\+?86)|(\(\+86\)))?(13[012356789][0-9]&#123;8&#125;|15[012356789][0-9]&#123;8&#125;|18[02356789][0-9]&#123;8&#125;|147[0-9]&#123;8&#125;|1349[0-9]&#123;7&#125;)$/</span>;   <span class="comment">//正则</span></span><br><span class="line">       fromEvent (cur,value,filter,<span class="string">'手机号不能为空'</span>,<span class="string">'手机号输入错误'</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">   $(<span class="string">".list .email"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> cur = $(<span class="keyword">this</span>);</span><br><span class="line">       <span class="keyword">var</span> value = cur.val();</span><br><span class="line">       <span class="keyword">var</span> filter  = <span class="regexp">/^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]&#123;2,4&#125;)+$/</span>;   <span class="comment">//正则</span></span><br><span class="line">     </span><br><span class="line">       fromEvent (cur,value,filter,<span class="string">'邮箱不能为空'</span>,<span class="string">'邮箱输入错误'</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="comment">//公共方法</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fromEvent</span> (<span class="params">cur,value,filter,text1,text2</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(value ==<span class="string">''</span>)&#123;</span><br><span class="line">           cur.siblings(<span class="string">".tip-error"</span>).show().text(text1);</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!filter.test(value))&#123;   <span class="comment">//正则匹配</span></span><br><span class="line">            cur.siblings(<span class="string">".tip-error"</span>).show().text(text2);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           cur.siblings(<span class="string">".tip-error"</span>).hide();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="comment">//3、提交 （AJAX)</span></span><br><span class="line">   $(<span class="string">".list .btn-submit"</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> _name = $.trim($(<span class="string">".name"</span>).val()),</span><br><span class="line">           _mobile = $.trim($(<span class="string">".mobile"</span>).val()),</span><br><span class="line">           _email = $.trim($(<span class="string">".email"</span>).val()),</span><br><span class="line">           _age = $.trim($(<span class="string">".age"</span>).val()),</span><br><span class="line">           _address = $.trim($(<span class="string">".address"</span>).val());</span><br><span class="line">       <span class="keyword">var</span> data =&#123;</span><br><span class="line">           name:_name,</span><br><span class="line">           mobile:_mobile,</span><br><span class="line">           email:_email,</span><br><span class="line">           age:_age,</span><br><span class="line">           address:_address</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="keyword">if</span>(_name==<span class="string">''</span>|| _mobile==<span class="string">''</span> || _email ==<span class="string">''</span> || $(<span class="string">".tip-error"</span>).is(<span class="string">":visible"</span>)) &#123;</span><br><span class="line">           alert(<span class="string">"请输入正确信息"</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           $.ajax(&#123;</span><br><span class="line">               type: <span class="string">"POST"</span>, <span class="comment">//请求方式</span></span><br><span class="line">               url: <span class="string">"http://localhost:3000/form_info"</span>, <span class="comment">//请求路径</span></span><br><span class="line">               <span class="keyword">async</span>: <span class="literal">true</span>, <span class="comment">//异步</span></span><br><span class="line">               data: data,  <span class="comment">//传参</span></span><br><span class="line">               dataType: <span class="string">'json'</span>, <span class="comment">//返回值类型</span></span><br><span class="line">               success: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">                   <span class="keyword">if</span>(msg.code ==<span class="string">'200'</span>)&#123;</span><br><span class="line">                       </span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;   </span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p><strong>封装一</strong>（我最喜欢的）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">  init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.bind();</span><br><span class="line">      <span class="keyword">this</span>.todoAjax();</span><br><span class="line">  &#125;,</span><br><span class="line">  bind:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">      <span class="comment">//1、成为焦点  错误提示框隐藏</span></span><br><span class="line">      $(<span class="string">".list li input"</span>).on(<span class="string">'focus'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          $(<span class="keyword">this</span>).siblings(<span class="string">".tip-error"</span>).hide();  <span class="comment">//find()   next()   siblings()</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//2、失去焦点       1）为空判断   2）格式匹配（正则）</span></span><br><span class="line">      $(<span class="string">".list input"</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> name = $(<span class="keyword">this</span>).prev().text();</span><br><span class="line">          <span class="keyword">var</span> reg;</span><br><span class="line">          <span class="keyword">switch</span> ($(<span class="keyword">this</span>).attr(<span class="string">"name"</span>)) &#123;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">"name"</span>:</span><br><span class="line">                  reg = <span class="regexp">/^[\u4e00-\u9fa5]&#123;2,4&#125;$/</span>;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">"mobile"</span>:</span><br><span class="line">                  reg = <span class="regexp">/^((\+?86)|(\(\+86\)))?(13[012356789][0-9]&#123;8&#125;|15[012356789][0-9]&#123;8&#125;|18[02356789][0-9]&#123;8&#125;|147[0-9]&#123;8&#125;|1349[0-9]&#123;7&#125;)$/</span>;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">"email"</span>:</span><br><span class="line">                  reg = <span class="regexp">/^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]&#123;2,4&#125;)+$/</span>;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">"age"</span>:</span><br><span class="line">                  reg = <span class="regexp">/^(?:[1-9]?\d|100)$/</span>;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          self.formEvent($(<span class="keyword">this</span>), $(<span class="keyword">this</span>).val(), name, reg);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">   formEvent:<span class="function"><span class="keyword">function</span>(<span class="params">cur,value,name,reg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(value ==<span class="string">''</span>)&#123;</span><br><span class="line">    cur.siblings(<span class="string">".tip-error"</span>).show().text(name + <span class="string">"不能为空！"</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!reg.test(value))&#123;   <span class="comment">//正则匹配</span></span><br><span class="line">    cur.siblings(<span class="string">".tip-error"</span>).show().text(name + <span class="string">"输入错误！"</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    cur.siblings(<span class="string">".tip-error"</span>).hide();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">  todoAjax:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">      $(<span class="string">".list .btn-submit"</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> _name = $.trim($(<span class="string">".name"</span>).val()),</span><br><span class="line">              _mobile = $.trim($(<span class="string">".mobile"</span>).val()),</span><br><span class="line">              _email = $.trim($(<span class="string">".email"</span>).val()),</span><br><span class="line">              _age = $.trim($(<span class="string">".age"</span>).val()),</span><br><span class="line">              _address = $.trim($(<span class="string">".address"</span>).val());</span><br><span class="line">          <span class="keyword">var</span> data =&#123;</span><br><span class="line">              name:_name,</span><br><span class="line">              mobile:_mobile,</span><br><span class="line">              email:_email,</span><br><span class="line">              age:_age,</span><br><span class="line">              address:_address</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="keyword">if</span>(_name==<span class="string">''</span>|| _mobile==<span class="string">''</span> || _email ==<span class="string">''</span> || $(<span class="string">".tip-error"</span>).is(<span class="string">":visible"</span>)) &#123;</span><br><span class="line">              alert(<span class="string">"请输入正确信息"</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">              $.ajax(&#123;</span><br><span class="line">                  type: <span class="string">"POST"</span>, <span class="comment">//请求方式</span></span><br><span class="line">                  url: <span class="string">"http://localhost:3333/getlist"</span>, <span class="comment">//请求路径</span></span><br><span class="line">                  <span class="keyword">async</span>: <span class="literal">true</span>, <span class="comment">//异步</span></span><br><span class="line">                  data: data,  <span class="comment">//传参</span></span><br><span class="line">                  dataType: <span class="string">'json'</span>, <span class="comment">//返回值类型</span></span><br><span class="line">                  success: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;<span class="comment">//msg 响应数据</span></span><br><span class="line">                      <span class="keyword">if</span>(msg.code ==<span class="string">'200'</span>)&#123;</span><br><span class="line">                          </span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;   </span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  obj.init();</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>封装二</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bind();</span><br><span class="line">        <span class="keyword">this</span>.todoAjax();</span><br><span class="line">    &#125;,</span><br><span class="line">    formEvent:<span class="function"><span class="keyword">function</span>(<span class="params">cur,value,filter,text1,text2</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value ==<span class="string">''</span>)&#123;</span><br><span class="line">            cur.siblings(<span class="string">".tip-error"</span>).show().text(text1);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!filter.test(value))&#123;   <span class="comment">//正则匹配</span></span><br><span class="line">             cur.siblings(<span class="string">".tip-error"</span>).show().text(text2);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            cur.siblings(<span class="string">".tip-error"</span>).hide();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    bind:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">//1、成为焦点  错误提示框隐藏</span></span><br><span class="line">        $(<span class="string">".list li input"</span>).on(<span class="string">'focus'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $(<span class="keyword">this</span>).siblings(<span class="string">".tip-error"</span>).hide();  <span class="comment">//find()   next()   siblings()</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//2、失去焦点       1）为空判断   2）格式匹配（正则）</span></span><br><span class="line">        $(<span class="string">".list .name"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> cur = $(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">var</span> value = cur.val();</span><br><span class="line">            <span class="keyword">var</span> filter  = <span class="regexp">/^[\u4e00-\u9fa5]&#123;2,4&#125;$/</span>;   <span class="comment">//正则</span></span><br><span class="line">            self.formEvent (cur,value,filter,<span class="string">'用户名不能为空'</span>,<span class="string">'用户名输入错误'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="string">".list .mobile"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> cur = $(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">var</span> value = cur.val();</span><br><span class="line">            <span class="keyword">var</span> filter  = <span class="regexp">/^((\+?86)|(\(\+86\)))?(13[012356789][0-9]&#123;8&#125;|15[012356789][0-9]&#123;8&#125;|18[02356789][0-9]&#123;8&#125;|147[0-9]&#123;8&#125;|1349[0-9]&#123;7&#125;)$/</span>;   <span class="comment">//正则</span></span><br><span class="line">            self.formEvent (cur,value,filter,<span class="string">'手机号不能为空'</span>,<span class="string">'手机号输入错误'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="string">".list .email"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> cur = $(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">var</span> value = cur.val();</span><br><span class="line">            <span class="keyword">var</span> filter  = <span class="regexp">/^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]&#123;2,4&#125;)+$/</span>;   <span class="comment">//正则</span></span><br><span class="line">            <span class="keyword">if</span>(value ==<span class="string">''</span>)&#123;</span><br><span class="line">                $(<span class="keyword">this</span>).siblings(<span class="string">".tip-error"</span>).show().text(<span class="string">"邮箱不能为空"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!filter.test(value))&#123;   <span class="comment">//正则匹配</span></span><br><span class="line">                 $(<span class="keyword">this</span>).siblings(<span class="string">".tip-error"</span>).show().text(<span class="string">"邮箱输入错误"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="keyword">this</span>).siblings(<span class="string">".tip-error"</span>).hide();</span><br><span class="line">            &#125;;</span><br><span class="line">            self.formEvent (cur,value,filter,<span class="string">'邮箱不能为空'</span>,<span class="string">'邮箱输入错误'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    todoAjax:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">".list .btn-submit"</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> _name = $.trim($(<span class="string">".name"</span>).val()),</span><br><span class="line">                _mobile = $.trim($(<span class="string">".mobile"</span>).val()),</span><br><span class="line">                _email = $.trim($(<span class="string">".email"</span>).val()),</span><br><span class="line">                _age = $.trim($(<span class="string">".age"</span>).val()),</span><br><span class="line">                _address = $.trim($(<span class="string">".address"</span>).val());</span><br><span class="line">            <span class="keyword">var</span> data =&#123;</span><br><span class="line">                name:_name,</span><br><span class="line">                mobile:_mobile,</span><br><span class="line">                email:_email,</span><br><span class="line">                age:_age,</span><br><span class="line">                address:_address</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span>(_name==<span class="string">''</span>|| _mobile==<span class="string">''</span> || _email ==<span class="string">''</span> || $(<span class="string">".tip-error"</span>).is(<span class="string">":visible"</span>)) &#123;</span><br><span class="line">                alert(<span class="string">"请输入正确信息"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    type: <span class="string">"POST"</span>, <span class="comment">//请求方式</span></span><br><span class="line">                    url: <span class="string">"http://localhost:3333/getlists"</span>, <span class="comment">//请求路径</span></span><br><span class="line">                    <span class="keyword">async</span>: <span class="literal">true</span>, <span class="comment">//异步</span></span><br><span class="line">                    data: data,  <span class="comment">//传参</span></span><br><span class="line">                    dataType: <span class="string">'json'</span>, <span class="comment">//返回值类型</span></span><br><span class="line">                    success: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(msg.code ==<span class="string">'200'</span>)&#123;</span><br><span class="line">                            </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  obj.init();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>封装三</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">base</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.blur_name = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cur = $(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">var</span> value = cur.val();</span><br><span class="line">        <span class="keyword">var</span> filter  = <span class="regexp">/^[\u4e00-\u9fa5]&#123;2,4&#125;$/</span>;   <span class="comment">//正则</span></span><br><span class="line">        self.formEvent(cur,value,filter,<span class="string">"用户名不能为空"</span>,<span class="string">"用户名错误"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.blur_mobile = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cur = $(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">var</span> value = cur.val();</span><br><span class="line">        <span class="keyword">var</span> filter  = <span class="regexp">/^((\+?86)|(\(\+86\)))?(13[012356789][0-9]&#123;8&#125;|15[012356789][0-9]&#123;8&#125;|18[02356789][0-9]&#123;8&#125;|147[0-9]&#123;8&#125;|1349[0-9]&#123;7&#125;)$/</span>;</span><br><span class="line">        self.formEvent(cur,value,filter,<span class="string">"手机号不能为空"</span>,<span class="string">"手机号错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.blur_email = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cur = $(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">var</span> value = cur.val();</span><br><span class="line">        <span class="keyword">var</span> filter  = <span class="regexp">/^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]&#123;2,4&#125;)+$/</span>;   <span class="comment">//正则</span></span><br><span class="line">        self.formEvent(cur,value,filter,<span class="string">"邮箱不能为空"</span>,<span class="string">"邮箱错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.formEvent= <span class="function"><span class="keyword">function</span>(<span class="params">cur,value,filter,text1,text2</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value==<span class="string">''</span>)&#123;</span><br><span class="line">            cur.siblings(<span class="string">".tip-error"</span>).show().text(text1)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!filter.test(value))&#123;   <span class="comment">//正则匹配</span></span><br><span class="line">            cur.siblings(<span class="string">".tip-error"</span>).show().text(text2)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            cur.siblings(<span class="string">".tip-error"</span>).hide();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//1、成为焦点，错误提示隐藏</span></span><br><span class="line">        $(<span class="string">".list ul li input"</span>).focus(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $(<span class="keyword">this</span>).siblings(<span class="string">".tip-error"</span>).hide();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、失去焦点，1）是否为空  2）格式校验</span></span><br><span class="line">        $(<span class="string">".name"</span>).blur(<span class="keyword">this</span>.blur_name);</span><br><span class="line">        $(<span class="string">".mobile"</span>).blur(<span class="keyword">this</span>.blur_mobile);</span><br><span class="line">        $(<span class="string">".email"</span>).blur(<span class="keyword">this</span>.blur_email);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3）提交   判断</span></span><br><span class="line">        $(<span class="string">".btn-submit"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> _name=$.trim($(<span class="string">".name"</span>).val()),</span><br><span class="line">                _mobile=$.trim($(<span class="string">".mobile"</span>).val()),</span><br><span class="line">                _email=$.trim($(<span class="string">".email"</span>).val()),</span><br><span class="line">                _age=$.trim($(<span class="string">".age"</span>).val()),</span><br><span class="line">                _address=$.trim($(<span class="string">".address"</span>).val());</span><br><span class="line">            <span class="keyword">var</span> data = &#123;</span><br><span class="line">                name:_name,</span><br><span class="line">                mobile:_mobile,</span><br><span class="line">                email:_email,</span><br><span class="line">                age:_age,</span><br><span class="line">                address:_address</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span>(_name==<span class="string">""</span> || _mobile==<span class="string">""</span>||_email==<span class="string">""</span> || $(<span class="string">".tip-error"</span>).is(<span class="string">":visible"</span>))&#123;</span><br><span class="line">                alert(<span class="string">"请输入正确信息"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    type:<span class="string">"post"</span>,<span class="comment">//请求方式</span></span><br><span class="line">                    url: <span class="string">"http://localhost:3000/form_info"</span>, <span class="comment">//请求路径</span></span><br><span class="line">                    data:data,<span class="comment">//传参数</span></span><br><span class="line">                    dataType:<span class="string">"json"</span>,</span><br><span class="line">                    success:<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(msg);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    error:<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">                        cosnole.log(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    bind.prototype = <span class="keyword">new</span> base();</span><br><span class="line">    <span class="keyword">var</span> valid = <span class="keyword">new</span> bind();</span><br><span class="line">    valid.init();</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><strong>html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>请完善以下信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"输入您的姓名"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tip-error"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"mobile"</span> <span class="attr">class</span>=<span class="string">"mobile"</span> <span class="attr">placeholder</span>=<span class="string">"输入您的手机"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tip-error"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>电子邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"输入您的电子邮箱"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tip-error"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">class</span>=<span class="string">"age"</span> <span class="attr">placeholder</span>=<span class="string">"输入您的年龄"</span> <span class="attr">maxlength</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tip-error"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>通讯地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"address"</span> <span class="attr">placeholder</span>=<span class="string">"输入您的通讯地址"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tip-error"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"fn-textcenter"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn-blue btn-submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码中涉及到ajax请求，这个需要启一个node服务，关于ajax和前后台数据交互的分享我会在以后的博文中更新~</p><p>效果图如下：<br><img src="https://img-blog.csdnimg.cn/20190203133652677.gif" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、js面向对象的概念（个人理解）&quot;&gt;&lt;a href=&quot;#1、js面向对象的概念（个人理解）&quot; class=&quot;headerlink&quot; title=&quot;1、js面向对象的概念（个人理解）&quot;&gt;&lt;/a&gt;1、js面向对象的概念（个人理解）&lt;/h2&gt;&lt;p&gt;（1）面向对象，即O
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>this关键字的深入理解</title>
    <link href="http://yoursite.com/2019/02/16/this%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/02/16/this关键字的深入理解/</id>
    <published>2019-02-16T15:48:37.000Z</published>
    <updated>2019-02-16T15:59:51.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、this是什么？"><a href="#一、this是什么？" class="headerlink" title="一、this是什么？"></a>一、this是什么？</h2><p>this是Javascript语言的一个关键字。 它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用，随着函数使用场合的不同，this的值会发生变化，指向是不确定的，也就是说是可以动态改变的；<strong>但是有一个总的原则，那就是this指的是，调用函数的那个对象</strong> （this 一般情况下，都是指向函数的拥有者）。</p><h2 id="二、this有啥用？平时在哪见到过？"><a href="#二、this有啥用？平时在哪见到过？" class="headerlink" title="二、this有啥用？平时在哪见到过？"></a>二、this有啥用？平时在哪见到过？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line"></span><br><span class="line"> &lt;li&gt;<span class="number">1111</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"> &lt;li&gt;2222&lt;/</span>li&gt;</span><br><span class="line"></span><br><span class="line"> &lt;li&gt;<span class="number">3333</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"> &lt;li&gt;4444&lt;/</span>li&gt;</span><br><span class="line"></span><br><span class="line"> &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"> &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   $("</span>ul li<span class="string">").click(function() &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     $(this).css('color','#f00').siblings().css('color','#333');</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> &lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>这是我们在用到Jquery时最多的处理方式，这里的this就是当前单击的li;这是我们接触到的最简单的this,在实际的应用中this更是遍地开花，随处可见，下面就说说this的一些常见应用。</p><h3 id="1、一般函数中使用this"><a href="#1、一般函数中使用this" class="headerlink" title="1、一般函数中使用this"></a>1、一般函数中使用this</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name=<span class="string">"jake"</span>;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//window</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);<span class="comment">//jake</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>上面代码中test是一个普通函数，在调用时实际上是test作为全局对象window的一个方法来进行调用的，即window.test();<br>所以这个地方是window对象调用了test方法,那么test函数当中的this即指window,同时window还拥有了另外一个属性name,值为jake.<br>但是在严格模式下，this的值为undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;      <span class="comment">//严格模式 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>)  <span class="comment">//undefined</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><h3 id="2、在对象的方法中使用-this"><a href="#2、在对象的方法中使用-this" class="headerlink" title="2、在对象的方法中使用 this"></a>2、在对象的方法中使用 this</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    obj.a = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    obj.fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.a;   <span class="comment">//this表示当前o对象  当前的this.a 等价于 obj.a</span></span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(obj.fun())</span><br></pre></td></tr></table></figure><h3 id="3、还有一些特殊的情况："><a href="#3、还有一些特殊的情况：" class="headerlink" title="3、还有一些特殊的情况："></a>3、还有一些特殊的情况：</h3><h4 id="1）对象中调用外部函数"><a href="#1）对象中调用外部函数" class="headerlink" title="1）对象中调用外部函数"></a>1）对象中调用外部函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line"></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> o = &#123;&#125;</span><br><span class="line"></span><br><span class="line"> o.a = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"> o.b = test;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(o.b())  <span class="comment">//结果为3，因为当前test()中的this表示的是o对象</span></span><br></pre></td></tr></table></figure><h4 id="2）字面量方式中的this"><a href="#2）字面量方式中的this" class="headerlink" title="2）字面量方式中的this"></a>2）字面量方式中的this</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line"></span><br><span class="line">    name:<span class="string">'sonia'</span>,</span><br><span class="line"></span><br><span class="line">    bind:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;   <span class="comment">//当前this表示为o对象</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  o.bind()</span><br></pre></td></tr></table></figure><h4 id="3）在构造函数中使用-this"><a href="#3）在构造函数中使用-this" class="headerlink" title="3）在构造函数中使用 this"></a>3）在构造函数中使用 this</h4><p>所谓构造函数，就是通过这个函数生成一个新对象（object）。当一个函数作为构造器使用时(通过 new 关键字), 它的 this 值绑定到新创建的那个对象。如果没使用 new 关键字, 那么他就只是一个普通的函数, this 将指向 window 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> Fun(<span class="string">'lili'</span>,<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fun.name);</span><br></pre></td></tr></table></figure><p>在上面的示例中, 有一个名为 Fun() 的构造函数。通过使用 new 操作符创建了一个全新的对象，名为 fun。同时还通传给构造函数参数, 作为新对象的name、age属性。通过最后一行代码中可以看到这个字符串成功地打印出来了, 因为 this 指向的是新创建的对象, 而不是构造函数本身。</p><h4 id="4）在Eval函数中使用this"><a href="#4）在Eval函数中使用this" class="headerlink" title="4）在Eval函数中使用this"></a>4）在Eval函数中使用this</h4><p>该函数执行时，this绑定到当前作用域的对象上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> name=<span class="string">"JAKE"</span>;</span><br><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    name:<span class="string">"jake"</span>,</span><br><span class="line">    showName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">eval</span>(<span class="string">"console.log(this.name)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.showName();  <span class="comment">//输出  "jake"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=person.showName;</span><br><span class="line">a();  <span class="comment">//输出  "JAKE"</span></span><br></pre></td></tr></table></figure><h2 id="三、如何改变this的指向"><a href="#三、如何改变this的指向" class="headerlink" title="三、如何改变this的指向"></a>三、如何改变this的指向</h2><p>apply() 方法接收两个参数: 第一个是要设置为 this 的那个对象, 第二个参数是可选的，如果要传入参数, 则封装为数组作为 apply() 的第二个参数即可。</p><p>call() 方法 和 apply() 基本上是一样的, 除了后面的参数不是数组， 而是分散开一个一个地附加在后面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.num;</span><br><span class="line"></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> obj =&#123;</span><br><span class="line"></span><br><span class="line">num : <span class="number">5</span>,</span><br><span class="line"></span><br><span class="line">fun:test</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(obj.fun.call())      <span class="comment">//返回的值是10，当前的this表示全局对象</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.num;</span><br><span class="line"></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> obj =&#123;</span><br><span class="line"></span><br><span class="line">num : <span class="number">5</span>,</span><br><span class="line"></span><br><span class="line">fun:test</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(obj.fun.call(obj))  <span class="comment">//返回值为5，当前的this为obj对象</span></span><br></pre></td></tr></table></figure><h2 id="四、this中常见的一道面试题"><a href="#四、this中常见的一道面试题" class="headerlink" title="四、this中常见的一道面试题"></a>四、this中常见的一道面试题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> number = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> obj = &#123;</span><br><span class="line"></span><br><span class="line">number:<span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">showNumber:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.number = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.number);</span><br><span class="line"></span><br><span class="line">   &#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.number);</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   obj.showNumber();<span class="comment">//答案是  1    3</span></span><br></pre></td></tr></table></figure><p>由于showNumber方法的拥有者是obj，所以this.number=3; this 指向的就是 obj 的属性 number。同理，第二个 console.log 打印的也是属性 number。为什么第二点说一般情况下this都是指向函数的拥有者，因为有特殊情况。函数自执行就是特殊情况，在函数自执行里，this 指向的是：window。所以第一个 console.log 打印的是 window 的属性 number。所以要加一点： 在函数自执行里，this 指向的是 window 对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、this是什么？&quot;&gt;&lt;a href=&quot;#一、this是什么？&quot; class=&quot;headerlink&quot; title=&quot;一、this是什么？&quot;&gt;&lt;/a&gt;一、this是什么？&lt;/h2&gt;&lt;p&gt;this是Javascript语言的一个关键字。 它代表函数运行时，自动生成
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue实现商城购物清单</title>
    <link href="http://yoursite.com/2019/02/16/Vue%E5%AE%9E%E7%8E%B0%E5%95%86%E5%9F%8E%E8%B4%AD%E7%89%A9%E6%B8%85%E5%8D%95/"/>
    <id>http://yoursite.com/2019/02/16/Vue实现商城购物清单/</id>
    <published>2019-02-16T15:40:12.000Z</published>
    <updated>2019-02-16T15:46:46.962Z</updated>
    
    <content type="html"><![CDATA[<p>今天分享一个我平时写的Vue实现购物车清单的小demo</p><p><strong>html部分</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"my"</span> &gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-info"</span> <span class="attr">style</span>=<span class="string">"margin:20px;"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 头部 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"display: inline-block;"</span>&gt;</span>我的购物清单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span>&gt;</span>清单总数</span><br><span class="line">             <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-warning"</span> &gt;</span>&#123;&#123;lists.length&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>  <span class="attr">placeholder</span>=<span class="string">"请输入要添加的商品"</span>/&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> @<span class="attr">click</span>=<span class="string">"add()"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">th</span>&gt;</span>清单名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">th</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">th</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(list,index) in lists"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;list.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;list.state | stateFilter&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-sm"</span> @<span class="attr">click</span>=<span class="string">"del(index)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>js部分</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Vue(&#123;   <span class="comment">//构建vue实例</span></span><br><span class="line">   el:<span class="string">'#my'</span>,    <span class="comment">//挂载元素  element</span></span><br><span class="line">     data:&#123;   <span class="comment">//数据</span></span><br><span class="line">           name:<span class="string">''</span>,</span><br><span class="line">           age:<span class="number">18</span>,</span><br><span class="line">           arr:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">           obj:&#123;<span class="attr">msg</span>:<span class="string">'123'</span>&#125;,</span><br><span class="line">           lists:[</span><br><span class="line">             &#123;<span class="attr">name</span>:<span class="string">'手机'</span>,<span class="attr">state</span>:<span class="string">'0'</span>&#125;,</span><br><span class="line">             &#123;<span class="attr">name</span>:<span class="string">'衣服2'</span>,<span class="attr">state</span>:<span class="string">'1'</span>&#125;,</span><br><span class="line">             &#123;<span class="attr">name</span>:<span class="string">'包包3'</span>,<span class="attr">state</span>:<span class="string">'2'</span>&#125;,</span><br><span class="line">             &#123;<span class="attr">name</span>:<span class="string">'化妆品'</span>,<span class="attr">state</span>:<span class="string">'0'</span>&#125;</span><br><span class="line">       ]</span><br><span class="line">   &#125;,</span><br><span class="line">      methods:&#123;   <span class="comment">//方法</span></span><br><span class="line">       add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(!<span class="keyword">this</span>.name) <span class="keyword">return</span>;</span><br><span class="line">         <span class="keyword">this</span>.lists.unshift(&#123;<span class="attr">name</span>:<span class="keyword">this</span>.name,<span class="attr">state</span>:<span class="string">'未采购'</span>&#125;);</span><br><span class="line">         <span class="keyword">this</span>.name=<span class="string">''</span>;</span><br><span class="line">     &#125;,</span><br><span class="line">     del:<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.lists.splice(index,<span class="number">1</span>);  <span class="comment">//index 位置   1个数</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   filters:&#123;   <span class="comment">//过滤器    文本格式    管道</span></span><br><span class="line">     stateFilter:<span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;   <span class="comment">//list.state</span></span><br><span class="line">       <span class="comment">// if(type =='0')&#123;</span></span><br><span class="line">       <span class="comment">//     return '未采购'</span></span><br><span class="line">       <span class="comment">// &#125;else &#123;</span></span><br><span class="line">       <span class="comment">//     return '已采购'</span></span><br><span class="line">       <span class="comment">// &#125;</span></span><br><span class="line">       <span class="keyword">switch</span>(type)&#123;<span class="comment">//在我们写业务代码时，如果判断条件过多可用switch替换if...else</span></span><br><span class="line">         <span class="keyword">case</span> <span class="string">'0'</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="string">'未采购'</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="string">'正在采购'</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="string">'已采购'</span>;</span><br><span class="line">         <span class="keyword">default</span> :</span><br><span class="line">           <span class="keyword">return</span> <span class="string">'未采购'</span>;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>效果图如下：<br><img src="https://img-blog.csdnimg.cn/20190203151300912.gif" alt="在这里插入图片描述"><br>如果有跟我一样正在学习vue的小伙伴，需要源码的可扫描下方二维码添加我联系方式，可以发给你哟！</p><p><strong>QQ</strong><br><img src="https://img-blog.csdnimg.cn/2019013117390352.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzM1MDQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>微信</strong><br><img src="https://img-blog.csdnimg.cn/20190131174008270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzM1MDQw,size_16,color_FFFFFF,t_70" alt="扫描添加我微信"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天分享一个我平时写的Vue实现购物车清单的小demo&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;html部分&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>reduce()和reduceRight()方法</title>
    <link href="http://yoursite.com/2019/02/16/reduce-%E5%92%8CreduceRight-%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/02/16/reduce-和reduceRight-方法/</id>
    <published>2019-02-16T13:50:40.000Z</published>
    <updated>2019-02-16T15:21:10.139Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在看一篇提升js性能的文章中看到数组中reduce()方法的应用，由于我在之前的es6学习中没有了解过这个方法，在我所看的文章中感觉这个方法挺有意思的，然后我查了点资料，前后看了几篇文章，自己找了几个例子敲了敲，瞬间感觉内心美滋滋的，所以今天我总结了下，在这里小结一下reduce()方法的概念和几个小例子。</p><h3 id="一、reduce-方法"><a href="#一、reduce-方法" class="headerlink" title="一、reduce()方法"></a>一、reduce()方法</h3><hr><p>reduce()方法接收一个函数callbackfn作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。</p><h4 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">array.reduce(callbackfn,[initialValue])</span><br></pre></td></tr></table></figure><p>reduce()方法接收callbackfn函数，而这个函数包含四个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callbackfn</span>(<span class="params">preValue,curValue,index,array</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>preValue: 上一次调用回调返回的值，或者是提供的初始值（initialValue）<br>curValue: 数组中当前被处理的数组项<br>index: 当前数组项在数组中的索引值<br>array: 调用 reduce()方法的数组<br>而initialValue作为第一次调用 callbackfn函数的第一个参数。</p><p>reduce()方法为数组中的每一个元素依次执行回调函数callbackfn，不包括数组中被删除或从未被赋值的元素，接受四个参数：初始值（或者上一次回调函数的返回值），当前元素值，当前索引，调用 reduce() 的数组。</p><p>回调函数第一次执行时，preValue 和 curValue 可以是一个值，如果 initialValue 在调用 reduce() 时被提供，那么第一个 preValue 等于 initialValue ，并且curValue 等于数组中的第一个值；如果initialValue 未被提供，那么preValue 等于数组中的第一个值，`curValue等于数组中的第二个值。</p><p>来看一个示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr.reduce( <span class="function">(<span class="params">preValue,curValue,index,array</span>) =&gt;</span>(preValue + curValue)) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>示例中的回调函数被执行四次，每次参数和返回的值如下：</p><table><thead><tr><th></th><th>perValue</th><th>curValue</th><th>index</th><th>arr</th><th>返回值</th></tr></thead><tbody><tr><td>第一次回调</td><td>0</td><td>1</td><td>1</td><td>[0,1,2,3,4]</td><td>1</td></tr><tr><td>第二次回调</td><td>1</td><td>2</td><td>2</td><td>[0,1,2,3,4]</td><td>3</td></tr><tr><td>第三次回调</td><td>3</td><td>3</td><td>3</td><td>[0,1,2,3,4]</td><td>6</td></tr><tr><td>第四次回调</td><td>6</td><td>4</td><td>4</td><td>[0,1,2,3,4]</td><td>10</td></tr></tbody></table><p>上面的示例reduce()方法没有提供initialValue初始值，接下来再上面的示例中，稍作修改，提供一个初始值，这个值为5。这个时候reduce()方法会执行五次回调，每次参数和返回的值如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">arr.reduce( <span class="function">(<span class="params">preValue,curValue,index,array</span>) =&gt;</span>(preValue + curValue), <span class="number">5</span>); <span class="comment">//15</span></span><br></pre></td></tr></table></figure></p><table><thead><tr><th></th><th>perValue</th><th>curValue</th><th>index</th><th>arr</th><th>返回值</th></tr></thead><tbody><tr><td>第一次回调</td><td>5</td><td>0</td><td>0</td><td>[0,1,2,3,4]</td><td>5</td></tr><tr><td>第二次回调</td><td>4</td><td>1</td><td>1</td><td>[0,1,2,3,4]</td><td>6</td></tr><tr><td>第三次回调</td><td>6</td><td>2</td><td>2</td><td>[0,1,2,3,4]</td><td>8</td></tr><tr><td>第四次回调</td><td>8</td><td>3</td><td>3</td><td>[0,1,2,3,4]</td><td>11</td></tr><tr><td>第五次回调</td><td>11</td><td>4</td><td>4</td><td>[0,1,2,3,4]</td><td>15</td></tr></tbody></table><p>上面代码通过reduce()方法一行代码就实现了一个简单的求和运算，是不是感觉hin简洁哟~ 而且性能杠杠滴。<br>没有对比就没有伤害，我们来对比一下我们平时用的for循环和while循环的求和方法以及它们消耗的时间：</p><h4 id="2-for循环"><a href="#2-for循环" class="headerlink" title="2.for循环"></a>2.for循环</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"forLoop"</span>);</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> sumResult = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">       sumResult += <span class="built_in">parseInt</span>(<span class="keyword">this</span>[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> sumResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.sum()); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"forLoop"</span>);<span class="comment">// forLoop: 0.370849609375ms</span></span><br></pre></td></tr></table></figure><h4 id="3-while循环"><a href="#3-while循环" class="headerlink" title="3.while循环"></a>3.while循环</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"whileLoop"</span>);</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> sumResult = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">var</span> i = <span class="keyword">this</span>.length;</span><br><span class="line">   <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">       sumResult += <span class="built_in">parseInt</span>(<span class="keyword">this</span>[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> sumResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.sum()); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"whileLoop"</span>);<span class="comment">//whileLoop: 0.97509765625ms</span></span><br></pre></td></tr></table></figure><p>回头再看看刚刚写的reduce()方法所用时间：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"reduceLoop"</span>);</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr.reduce( <span class="function">(<span class="params">preValue,curValue,index,array</span>) =&gt;</span>(preValue + curValue)) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"reduceLoop"</span>);<span class="comment">//reduceLoop: 0.08984375ms</span></span><br></pre></td></tr></table></figure><p>从下表可以明显的看出reduce()相较于for循环和while循环性能高了一个数量级，而且代码十分简洁，是不是瞬间有种感觉：原来还可以这样！！</p><table><thead><tr><th></th><th>for循环</th><th>while循环</th><th>reduce()</th></tr></thead><tbody><tr><td>消耗时间</td><td>0.370849609375ms</td><td>0.97509765625ms</td><td>0.08984375ms</td></tr></tbody></table><h3 id="二、几个小案例"><a href="#二、几个小案例" class="headerlink" title="二、几个小案例"></a>二、几个小案例</h3><hr><h4 id="1-同时实现map和filter"><a href="#1-同时实现map和filter" class="headerlink" title="1.同时实现map和filter"></a>1.同时实现map和filter</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1.同时实现map和filter</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>];</span><br><span class="line"><span class="keyword">var</span> doubleAndOver50 = numbers.reduce(<span class="function">(<span class="params">resultList,num</span>)=&gt;</span> &#123;</span><br><span class="line">  num = num*<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (num &gt; <span class="number">50</span>)&#123;</span><br><span class="line">    resultList.push(num);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> resultList;</span><br><span class="line">&#125;,[]);</span><br><span class="line">doubleAndOver50;<span class="comment">//[60, 80]</span></span><br></pre></td></tr></table></figure><h4 id="2-统计数组中相同项的个数"><a href="#2-统计数组中相同项的个数" class="headerlink" title="2.统计数组中相同项的个数"></a>2.统计数组中相同项的个数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.统计数组中相同项的个数</span></span><br><span class="line">    <span class="keyword">var</span> cars = [<span class="string">"BMW"</span>,<span class="string">"benz"</span>,<span class="string">"benz"</span>,<span class="string">"BMW"</span>,<span class="string">"大众汽车"</span>,<span class="string">"大众汽车"</span>,<span class="string">"兰博基尼"</span>];</span><br><span class="line">    <span class="keyword">var</span> carsObj = cars.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">obj,name</span>) </span>&#123;</span><br><span class="line">      obj[name] = obj[name]? ++obj[name]:<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;,&#123;&#125;);</span><br><span class="line">    carsObj;  <span class="comment">//&#123;BMW: 2, benz: 2, 大众汽车: 2, 兰博基尼: 1&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-数组去重"><a href="#3-数组去重" class="headerlink" title="3.数组去重"></a>3.数组去重</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> str = arr.sort().reduce(<span class="function">(<span class="params">prev, cur</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(prev.length===<span class="number">0</span> || prev[prev.length<span class="number">-1</span>]!==cur)&#123;</span><br><span class="line">       prev.push(cur);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> prev;</span><br><span class="line">&#125;, []);</span><br><span class="line">str <span class="comment">// (5) [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="4-求阶乘"><a href="#4-求阶乘" class="headerlink" title="4.求阶乘"></a>4.求阶乘</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,index,arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> prev * cur ;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">str <span class="comment">//3628800</span></span><br></pre></td></tr></table></figure><h4 id="5-将二维数组转为一位数组"><a href="#5-将二维数组转为一位数组" class="headerlink" title="5.将二维数组转为一位数组"></a>5.将二维数组转为一位数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> a= [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>],[<span class="number">8</span>,<span class="number">9</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> prev.concat(cur)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">str    <span class="comment">//(10) [0,1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><h3 id="三、reduceRight-方法"><a href="#三、reduceRight-方法" class="headerlink" title="三、reduceRight()方法"></a>三、reduceRight()方法</h3><hr><p>reduceRight()方法的功能和reduce()功能是一样的，不同的是reduceRight()从数组的末尾向前将数组中的数组项做累加，参数和上面是一样的。结果都是一样的我就不写代码了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天在看一篇提升js性能的文章中看到数组中reduce()方法的应用，由于我在之前的es6学习中没有了解过这个方法，在我所看的文章中感觉这个方法挺有意思的，然后我查了点资料，前后看了几篇文章，自己找了几个例子敲了敲，瞬间感觉内心美滋滋的，所以今天我总结了下，在这里小结一下r
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>详述JavaScript数据类型</title>
    <link href="http://yoursite.com/2019/02/14/%E8%AF%A6%E8%BF%B0JavaScript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/02/14/详述JavaScript数据类型/</id>
    <published>2019-02-14T14:16:35.000Z</published>
    <updated>2019-02-16T12:10:43.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、JavaScript数据类型有几种？"><a href="#一、JavaScript数据类型有几种？" class="headerlink" title="一、JavaScript数据类型有几种？"></a>一、JavaScript数据类型有几种？</h1><hr><p>JavaScript有两种数据类型，分别是基本数据类型和引用数据类型。<br>基本数据类型包括：String、Number、Boolean、Null、Undefined和Symbol（ES6新增的，表示独一无二的值）</p><p>而引用类型统称为Object对象，主要包括对象、数组和函数，下面是它们几种字面量的创建方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;<span class="comment">//String</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;<span class="comment">//number</span></span><br><span class="line"><span class="keyword">var</span> bool = <span class="literal">true</span>;<span class="comment">//boolean</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="literal">null</span>; <span class="comment">//object -----这是因为es设计时认为，null表示空对象指针，只不过值为空，但是代码执行时会正常站位；所以用typeof的时候，会返回"object"。所以一般都会把null当做空对象的占位符。</span></span><br><span class="line"><span class="keyword">var</span> und = <span class="literal">undefined</span>   <span class="comment">//undefined</span></span><br><span class="line"><span class="comment">//symbol</span></span><br><span class="line"><span class="comment">// 没有参数的情况</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>();</span><br><span class="line">s1 === s2 <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参数的情况</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</span><br><span class="line">s1 === s2  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h1 id="二、基本数据类型"><a href="#二、基本数据类型" class="headerlink" title="二、基本数据类型"></a>二、基本数据类型</h1><hr><ol><li><strong>值是不可变的</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"Jake Zhang"</span>;</span><br><span class="line"></span><br><span class="line">name.toUpperCase();<span class="comment">//输出 JAKE ZHANG</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name);<span class="comment">// 输出 Jake Zhang</span></span><br></pre></td></tr></table></figure><p>由以上代码可看出基本数据类型的值是不可变的</p><ol start="2"><li><p><strong>存放在栈区</strong></p><p>基本类型值指的是简单的数据段，按值访问，可操作保存在变量中的实际的值，其占据空间小、大小固定，属于被频繁使用的数据，所以放入栈（stack）中存储。</p></li><li><p><strong>值的比较</strong></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> m = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(n == m);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(n === m);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>“= =”：只进行值的比较，会进行数据类型转换；<br>“= = =”：不不仅进行值的比较，还会进行数据类型的比较。</p><h1 id="三、引用数据类型"><a href="#三、引用数据类型" class="headerlink" title="三、引用数据类型"></a>三、引用数据类型</h1><hr><ol><li><p><strong>值是可变的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">name:<span class="string">'jake'</span>,</span><br><span class="line">      age:<span class="number">22</span>,</span><br><span class="line">       action:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"do something!"</span>)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">person.age = <span class="number">23</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.age)<span class="comment">// 23</span></span><br></pre></td></tr></table></figure></li></ol><p>有上面的代码可看出引用数据 类型可以拥有一个或多个属性和方法，而且是可以动态修改的。</p><ol start="2"><li><p><strong>同时存放在栈内存和堆内存</strong></p><p>引用数据类型是存放在堆（heap）中的对象，占据空间大、大小不固定，如果存放在栈中，会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址，当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。（有关js中栈和堆的详解可参考文章[(<a href="https://www.cnblogs.com/heioray/p/9487093.html)）" target="_blank" rel="noopener">https://www.cnblogs.com/heioray/p/9487093.html)）</a></p></li><li><p><strong>值的比较</strong></p></li></ol><p>当从一个变量向另一个变量赋引用类型的值时，同样也会将存储在变量中的对象的值复制一份到位新变量分配的空间中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  age:<span class="number">20</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> person2 = person1;</span><br><span class="line">person2.age = <span class="number">23</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1.age = person2.age)<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>前面讲到基本数据类型和引用数据类型存储于内存中的位置不一样，引用数据类型存储在堆中的对象，与此同时，在栈中存储了指针，而这个指针的指向正是堆中实体的起始位置。变量person1初始化时，person1指针指向该对象{age：20}的地址，将person1赋给person2后，person2又指向该对象{age：20}的地址，这两个变量指向了同一个对象。因此改变其中任何一个变量，都会相互影响。<br><img src="https://img-blog.csdnimg.cn/20190123171842933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzM1MDQw,size_16,color_FFFFFF,t_70" alt="ZJK"><br>此时，如果取消某一个变量对于原对象的引用，不会影响到另一个变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;age:22&#125;</span><br><span class="line">var b = a;</span><br><span class="line">a = 1;</span><br><span class="line">console.log(b);//&#123;age:22&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，a和b指向同一个对象，然后a的值变为1，这时不会对b产生影响，b还是指向原来的那个对象。      </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、JavaScript数据类型有几种？&quot;&gt;&lt;a href=&quot;#一、JavaScript数据类型有几种？&quot; class=&quot;headerlink&quot; title=&quot;一、JavaScript数据类型有几种？&quot;&gt;&lt;/a&gt;一、JavaScript数据类型有几种？&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>hexo github搭建个人博客的感想</title>
    <link href="http://yoursite.com/2019/02/14/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%84%9F%E6%83%B3/"/>
    <id>http://yoursite.com/2019/02/14/hexo搭建个人博客感想/</id>
    <published>2019-02-14T11:24:59.216Z</published>
    <updated>2019-02-16T09:18:27.152Z</updated>
    
    <content type="html"><![CDATA[<p>好久前就想用hexo搭建一个自己的博客，闲来无聊写点东西，但一直都没有付诸行动，直到我在CSDN注册了账号，在我刷博客时，偶然发现一个hexo搭建个人博客的教程，结果弄了我整整一天，硬是访问不了，后来问了一个朋友又要了一个教程，才发现我看的教程有个关键点没写（域名三次解析及注意事项），到今天终于能访问了，今晚肯定睡着都会笑，毕竟拥有一个自己搭建的博客是每一个码农的信仰，虽然很多东西还要花时间慢慢部署，但总算迈出第一步了，教程我把我朋友给我的放这，有想搭建个人博客的可以参考参考<a href="教程">https://zhuanlan.zhihu.com/p/26625249</a>哈哈，我呢先来熟悉哈Markdown的语法，然后把我CSDN的文章搬过来</p><h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h1><p>第一种是使用 # 表示标题，其中 # 号必须在行首，</p><p>第二种是使用 === 或者 — 表示。<br>–&gt; # 这是一级标题</p><p>–&gt; ## 这是二级标题</p><p>–&gt; ### 这是三级标题</p><h1 id="2-分割线"><a href="#2-分割线" class="headerlink" title="2.分割线"></a>2.分割线</h1><p>使用三个或以上的 - 或者 * 表示，且这一行只有符号，注意不要被识别为二级标题即可，例如中间或者前面可以加空格。</p><hr><hr><h1 id="3-斜体和粗体"><a href="#3-斜体和粗体" class="headerlink" title="3.斜体和粗体"></a>3.斜体和粗体</h1><p>使用*和**分别表示斜体和粗体，</p><p><em>我是斜体</em></p><p><strong>我是粗体</strong></p><p><strong><em>又斜又粗</em></strong></p><h1 id="4-超链接和图片"><a href="#4-超链接和图片" class="headerlink" title="4.超链接和图片"></a>4.超链接和图片</h1><p>超链接和图片的写法类似，图片尽在超链接前面多了一个文字描述，一般是<a href="链接">点我跳转</a>&lt;–这个就是超链接。</p><h1 id="5-无序列表"><a href="#5-无序列表" class="headerlink" title="5.无序列表"></a>5.无序列表</h1><p>使用+、-和*表示无序列表，前后刘一行空白，可嵌套，例如：</p><ul><li>AAA<ul><li>A1</li><li>A2<ul><li>a1</li><li>a2</li></ul></li></ul></li></ul><h1 id="6-有序列表"><a href="#6-有序列表" class="headerlink" title="6.有序列表"></a>6.有序列表</h1><p>使用 ‘1.’ （点号后面有个空格）表示有序列表，可嵌套。</p><pre><code>1. A   1. A1   2. A2       1. a1</code></pre><h1 id="7-文字引用"><a href="#7-文字引用" class="headerlink" title="7.文字引用"></a>7.文字引用</h1><p>使用 &gt; 表示，可以有多个 &gt;，表示层级更深，例如</p><blockquote><p>第一层</p><blockquote><p>第二层</p><blockquote><p>第三层</p></blockquote></blockquote></blockquote><blockquote><p>跳出来要空一行</p></blockquote><h1 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.代码块"></a>8.代码块</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这里面放代码。。。</span><br></pre></td></tr></table></figure><p>差不多这些就是常用的了，当然还有很多，以后碰到在更新。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久前就想用hexo搭建一个自己的博客，闲来无聊写点东西，但一直都没有付诸行动，直到我在CSDN注册了账号，在我刷博客时，偶然发现一个hexo搭建个人博客的教程，结果弄了我整整一天，硬是访问不了，后来问了一个朋友又要了一个教程，才发现我看的教程有个关键点没写（域名三次解析及
      
    
    </summary>
    
    
      <category term="感想" scheme="http://yoursite.com/tags/%E6%84%9F%E6%83%B3/"/>
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
